(NOTE: This is an excerpt from the Mnual and Handbook section 4.Installing.
For PDF version please see docs/manual/out/pdf/Manual.pdf )

Installing

     ------------------------------------------------------------------------------------------

   [Note] Note                                                                                    
          The following section is directed to a system administrator with previous experience of 
          installing self-compiled software.                                                      

  System requirements

   The software is designed to work on a GNU Linux derived system. It has been built and verified
   on the following systems and versions:

     * OpenSuSE 12.3, 13.1

     * Linux Mint r15, r16

     * OS X Maverick 10.9 (Experimental support only)

   The daemon will specifically not run on any variant of MS Windows nor will it ever be ported
   by the author to any variants thereof.

   Even though the daemon is only tested on these versions it will most likely build fine on most
   recent GNU Linux distributions. It does not make use of any special code, tricks or requires
   special libraries. In order to compile the software a supported C compiler must be used. As of
   version 1.0.0 the following compilers are officially supported:

     * gcc, v4.7.x & v4.8.x

     * clang, v3.2

   In addition the daemon need two utility libraries to build. The build configuration will check
   for those libraries and if they are not found an error message is shown on exactly what
   library is missing. For version 1.0.0 of the software the following external libraries are
   needed for a successful compilation.

     * libpcre3

     * libsqlite3

   In addition, if your system has libiniparser library the build will also use it and if it is
   not available a built-in version will be used. In order to compile with the needed libraries
   the development version of each library (usually named with a "-devel" or "-dev" suffix) must
   be installed.

  Building and installing

   Even though the process of installing the daemon ideally is as simple as typing three commands
   it is inevitable that different systems and variants behave differently and it is impossible
   to test the software build on all possible configurations "in the wild". While the software is
   configured to handle most system differences automatically there will always be corner cases
   that will require some minor adjustments to get the software working on that particular
   system. Unfortunately that requires a bit of experience.

   It will be helpful if you previously experience running configure and make. The commands

         ./configure && make -j4
         sudo make install

   is a standard way of compiling and installing Unix/GNU Linux software based on the GNU
   Automake tool chain (which is a fantastic piece of canned black magic and years of
   experience). With default configuration the daemon will be installed in /usr/bin and the
   configuration directory will be set to /etc/g7ctrl. If you would like to install the daemon in
   other places, for example under /usr/local/bin, then configure the daemon using the --prefix
   argument as

         ./configure --prefix=/usr/local && make
         sudo make install

   If you are not comfortable with this process or have never done this before it is recommended
   for you to use a pre-compiled package for your particular system.

   [Tip] Tip                                                                                      
         If a package does not yet exist for your system please consider requesting a package to  
         be provided from the people responsible for your distribution.                           

  Installing the daemon as a systemd service

   For technical reason having to do with the way the autotools work the installation does not
   enable the daemon as a service. If you want to have the daemon run as a systemd service
   execute the following line after you have done the standard make install (still as root)

         systemctl enable g7ctrl.service

   This will enable the g7ctrl service with systemd in multi-user mode.

  Rebuilding the documentation

   The distribution comes with pre-rendered versions of all documentation in both plain text,
   HTML and PDF format.

   The documentation is written using the Docbook 5 XML schema which is a very good way to build
   multi-mode documentation. However, rebuilding the documentation (perhaps you want to add some
   section or have found one or more spelling mistakes that irritates you) requires a fully
   working Docbook 5 environment.

   While this is certainly possible Docbook5 and XML transformations might not be everyone's coup
   of tea. if you are not used to the XML transformation process it can be a certain learning
   step. The configuration process will investigate your system if it has the capability to
   render all or some of the output formats and state that information at the end after running
   the "./configure" script.

   [Tip] Tip                                                                                      
         An easy way to get a fully working Docbook5 setup is to check out the source directly    
         from the repository and run the bootstrap.sh script. This will re-create a full build    
         environment for the daemon. See the section called "Creating a build environment"        

  Configuring and compiling the source using the distributed tarball

   Using the tar-ball installation is the recommended way for most end users (compared to getting
   the source directly from the repository) since the tar ball has pre-built configuration
   environment and pre-rendered documentation. After downloading the tarball (please use the
   latest version available at the time of download) it needs to be extracted to a temporary
   directory where it can be compiled.

   Assuming you have downloaded version 1.0.0 the commands to extract the source is first

         tar xzf g7ctrl-1.0.0.tar.gz

   or if you downloaded the ".xz" version (which is in general smaller but requires the
   xz-compression program, which makes use of the more efficient LMZ2)

         tar xJf g7ctrl.1.0.0.tar.xz

   In order to then configure and compile the sources (using default settings) do the following:

          cd g7ctrl-1.0.0
          ./configure && make -j4

   (the -j4 is strictly speaking not necessary but will speed up the compilation a bit through
   parallelization) If some of the necessary prerequisites are missing (like one of the required
   libraries) an error message will be given. Install the required library and run the commands
   again. Once the compilation process is done the daemon needs to be installed. This requires
   root privileges. To install the daemon do the following

         sudo make install

   By default the installation process will install the binary in /usr/bin, the configuration
   files in /etc/g7ctrl and the database in /usr/share/g7ctrl. The exact location can easily be
   changed by using the "--prefix" argument to "configure". For a complete list of options at
   configuration time please run

         ./configure --help

  Setting up your own build environment - for developers

   If your are planning to do some development of your own or just want to follow the development
   of the daemon more closely than waiting for official releases you can set up your own local
   copy of the repository. However, this is only recommended for developers with previous
   experience with medium complex software. Specifically you need experience with the subversion
   SCS since that is what the repository uses.

   To help setup a full build environment including the Docbook5 environment with this there are
   two utility script in the bldscripts directory which when run will automatically set up a
   complete build environment including a working Docbook5 environment. The two included
   bootstrap scripts are

     * bootstrap.sh

       Used for RPM based system like OpenSuSE

     * bootstrap-deb.sh

       Used for PKG based system such as Debian or Linux Mint

   The bootstrap script are only meant to be run once after the initial checkout.

   If you are on a Debian based system the following two steps are all that is needed to both
   checkout and setup a complete build system

         svn co http://www.sourceforge.net/p/g7ctrl/trunk g7ctrl
         cd g7ctrl
         sh ./bldscripts/bootstrap-deb.sh

   and if you are on a OpenSuSE (RPM) based system use the following steps

         svn co http://www.sourceforge.net/p/g7ctrl/trunk g7ctrl
         cd g7ctrl
         sh ./bldscripts/bootstrap.sh

   The bootstrap script will install all required pre-requisites including GNU autoconfig and
   automake tools. If no errors were found you should see the following information on the
   screen.

 Build environment is ready.

 Now run autoreconf
 You can now run "./stdbuild.sh" to build the daemon
 and then then run "./mkrelease.sh" to create new releases.

   Now run the autoreconf script in order to recreate the GNU autotools setup. After that you can
   proceed as usual to build the source.

   [Note] Note                                                                                    
          Please note that you will not have the ability check in changes to the code base by     
          default. To get permission you need to show that you have a substantial contribution    
          and demonstrated clear knowledge at the level required to comprehend the code base. If  
          you believe you meet this requirement contact the author via email stating your         
          request. For more technical information on the source tree please see ???               

   For development there are two additional configuration parameters that can be given to the
   configures process.

   --enable-simulate

           This will allow the execution of commands even though a real device is not connected.
           Note that if this is enabled the daemon will never be able to communicate with a real
           device!

   --enable-stacktrace

           This will instrument the build so that in case of a SIGSEGV (or SIGABRT, SIGBUS) a
           limited stack trace will be written to "/tmp" to facility debugging. It is also
           recommended that the system is setup to allow for full core-dump in order to help with
           the post-mortem debugging. The stack trace is however useful to help analyze a fault
           at an end user where he/she can mail the stack trace back to the developer for
           analyze. Ideally a watch daemon should be added to the system that will watch the /tmp
           directory for a stack trace and in that case offer the end user to automatically mail
           the trace (and mini-dump) back to the developer.

           [Note] Note                                                                            
                  --enable-stacktrace is not supported on OSX/Darwin due to reliance on specific  
                  GNU Linux system libraries (stack-walking) and will give a configuration error  
                  if enabled on OSX.                                                              

  Configuring the daemon

   After a successful installation the daemon needs to be configured. This is done by adjusting
   the configuration template file. The first step is to switch to root and then use the template
   provided to create an initial configuration file. Assuming the configuration file is installed
   in the default directory start by doing the following:

          cd /etc/g7ctrl
          sudo cp g7ctrl.conf.template g7ctrl.conf

   The next step is to open the configuration file in your favourite editor and adjust a few
   settings in accordance with your preferences and system. There are very few settings that you
   absolutely have to adjust. Depending on your needs and setup you should as a minimum review
   the following settings:

     * SMTP mail server.

       If you intend to use the mail functionality of the daemon you need to state the name of
       the SMTP server and your credentials (user and password)

     * Listening ports

       Reviewing what ports the daemon is listening on from command and device connections. By
       default the daemon will listen on port 3100 for commands and on port 3400 for incoming
       events from the tracking device such as alarms and location updates. The ports can be any
       number but it is recommended you keep the port range in the range [1025-9000] unless you
       really know what you are doing!

     * Connection password

       In order to make a command connection to the daemon password must normally be given. By
       default the build process will create a random 6 letter password in the configuration
       file. You might want to change this to better suit you environment. If you only intend to
       have the daemon reachable from your local computer network (and not have the command port
       open to the entire internet) you might turn off the password to avoid having to type it
       whenever you want to connect the daemon.

       However, if you have the daemon accessible from the internet you really, really should
       have it protected by a password of minimum 8 characters in length. However since the
       communication is done in plain text it is susceptible for line listening. For a secure
       communication the command shell should be configured as a login shell so that the
       communication can easily be done over a encrypted link, more details are available in ???.


