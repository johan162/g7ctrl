

    // Setup mail template



        size_t const maxkeys=16;
        struct keypairs *keys = new_keypairlist(maxkeys);
        size_t const n_str_buff = 2048;
        char str_buff[n_str_buff];
        size_t ki = 0 ;

        // Get full current time to include in mail
        time_t now = time(NULL);
        ctime_r(&now,str_buff);
        str_buff[strnlen(str_buff,n_str_buff-1)-1] = 0; // Remove trailing newline
        add_keypair(keys,maxkeys,"SERVERTIME",str_buff,&ki);

        // Include the server name in the mail
        gethostname(str_buff,80);
        str_buff[n_str_buff-1] = '\0';
        add_keypair(keys,maxkeys,"SERVERNAME",str_buff,&ki);

        // Add information on disk usage
        char ds_fs[255],ds_size[128],ds_avail[128],ds_used[128];
        int ds_use;
        if( 0 == get_diskspace(basedatadir,ds_fs,ds_size,ds_used,ds_avail,&ds_use) ) {
            add_keypair(keys,maxkeys,"DISK_SIZE",ds_size,&ki);
            add_keypair(keys,maxkeys,"DISK_USED",ds_used,&ki);
            snprintf(str_buff,sizeof(str_buff)-1,"%d",ds_use);
            add_keypair(keys,maxkeys,"DISK_PERCENT_USED",str_buff,&ki);
        }

        char subjectbuff[256];
        snprintf(subjectbuff,sizeof(subjectbuff)-1,"GM7 Event %s done",short_filename);
        subjectbuff[255] = '\0';

        if( -1 == send_mail_template(subjectbuff, daemon_email_from, send_mailaddress,"mail_transcend", keys, ki) ) {
            logmsg(LOG_ERR,"Failed to send mail using template \"mail_transcend\"");
        } else {
            logmsg(LOG_DEBUG,"Successfully sent mail using template \"mail_transcend\"!");
        }

        free_keypairlist(keys,ki);



